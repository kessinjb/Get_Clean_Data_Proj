tail(plants, 15)
summary(plants)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
2
rm(list=ls())
swirl()
swirl()
submit()
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot()
?plot
plot(cars, speed, dist)
plot(cars)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed" ,ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
swirl()
R.Version.String
R.version.string
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
invisible(if(file.exists("example.h5")){file.remove("example.h5")})
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
readA = h5read("example.h5","foo/A")
readB = h5read("example.h5","foo/foobaa/B")
readdf= h5read("example.h5","df")
readA
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr);
google = handle("http://google.com")
pg1 = GET(handle=google,path="/")
pg2 = GET(handle=google,path="search")
library(httr)
myapp <- jbk_quiz2("github",
key = "f7829f55e50ae616df27",
secret = "3bdd5385d7feade67bcc5e576b1ee224f28e0014")
myapp <- oauth_app("github",
key = "f7829f55e50ae616df27",
secret = "3bdd5385d7feade67bcc5e576b1ee224f28e0014")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(RCurl)
library(Curl)
library(Curl)
if(!file.exists("data")){dir.create("data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
fileurl
fileUrl
download.file(fileUrl,destfile="question2.csv",method="curl")
getwd()
if(!file.exists("data")){dir.create("data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl,destfile="question2.csv")
acs <-read.csv("question2.csv", na.string="Not Available", stringsAsFactors=FALSE)
library(sqldf)
load.packages(sqldf)
install.packages(sqldf)
install.packages("sqldf")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select distinct AGEP from acs")
sqldf("select unique AGEP from acs")
sqldf("select AGEP where unique from acs")
sqldf("select distinct AGEP from acs")
con = url("con = url("http://biostat.jhsph.edu/~jleek/contact.html ")
con = url(con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
tapply(htmlCode, nchar)
sapply(htmlCode, nchar)
nchar(htlmCode[,10])
nchar(htmlCode[,10])
htmlCode[,10]
strn(htmlCode)
str(htmlCode)
library(httr)
html2 = GET("http://biostat.jhsph.edu/~jleek/contact.html")
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
htmlCode
quest4 <- as.dataframe(htmlCode)
quest4 <- data.frame(htmlCode)
quest4
tapply(quest4,nchar)
nchar(quest4[,10])
nchar(quest4[10,])
str(quest4)
sapply(quest4$htmlCode, nchar)
sapply(quest4$htmlCode, length)
class(quest4$htmlCode)
quest4$htmlCode <- as.character(quest4$htmlCode)
sapply(quest4$htmlCode, nchar)
nchar(quest4$htmlCode[10,])
nchar(quest4$htmlCode)
tapply(quest4$htmlCode, nchar)
quest4$htmCode[10, ]
quest4$htmCode[, 10]
head(quest4, 10)
head(quest4, 30)
head(quest4, 100)
data <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", widths, header = FALSE, sep = "\t",
skip = 0, row.names, col.names, n = -1,
buffersize = 2000, fileEncoding = "", ...)
data <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", widths, header = FALSE, sep = "\t",
skip = 0, row.names, col.names, n = -1,
buffersize = 2000, fileEncoding = "")
data <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
## Question 5
data <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
c(15, 4, 9, 4, 9, 4, 9))
# C part just tells width of each line
head(data)
data <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
c(15, 4, 9, 4, 9, 4, 9), header = FALSE, skip = 0)
head(data)
data <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
c(15, 4, 9, 4, 9, 4, 9), header = FALSE, skip = 4)
head(data)
tapply(data, sum)
sum(data$v4)
str(data)
summarise(data, sum=sum(v4))
library(dplyr)
summarise(data, sum=sum(v4))
load.packages(dplyr)
load.packages("dplyr")
library(dplyr, warn.conflicts=FALSE)
load.packages("Rcpp")
library("dplyr", lib.loc="~/R/R-3.2.0/library")
install.packages(c("evaluate", "git2r"))
library(dplyr)
install.packages("dplyr", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(dplyr)
summarise(data, sum=sum(v4))
summarise(data, sum=sum(data$v4))
head(data)
data <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
c(15, 4, 9, 4, 9, 4, 9, 4, 9), header = FALSE, skip = 4)
head(data)
data <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",
c(10, 9, 4, 9,4,9,4,9, 4), header = FALSE, skip = 4)
head(data)
summarise(data, sum=sum(data$v4))
rowSums(data$v4)
sum(data$v4)
str(data)
summary(data$v4)
summary(data$V4)
sum(data$V4)
swirl(r)
swirl()
library(swirl)
rm(list=ls())
swirl()
mydf <- read.csv("path2csv", stringsasfactors= FALSE)
?read.csv
mydf <- read.csv("path2csv", stringsAsFactors = FALSE )
mydf <- read.csv(path2csv, stringsAsFactors = FALSE )
dim(mfdf)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(my_df)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
select(cran, 5:20)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filer(cran, package == "swirl")
filter(cran, package == "swirl")
filter(cran,
| r_version == "3.1.1", country == "US"
filter(cran, r_version == "3.1.1", country == "US"
)
?Comparison
filter(cran, r_version == "3.0.2", country == "India"
)
filter(cran, r_version <= "3.0.2", country == "IN"
)
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os ="linux-gnu")
filter(cran, size > 100500, r_os =="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na())
filter(cran, !is.na(r_version) == FALSE)
filter(cran, !is.na(r_version) == TRUE)
filter(cran, !is.na(r_version))
cran2 <- filter(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
crand <- select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
dat <- read.xlsx("DJ_Lead_Time.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = TRUE, skipEmptyRows = TRUE,
check.names = FALSE, namedRegion = NULL)
library(xlsx)
dat <- read.xlsx("DJ_Lead_Time.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = TRUE, skipEmptyRows = TRUE,
check.names = FALSE, namedRegion = NULL)
library(rJava)
install.packages("readxl") # CRAN version
library(readxl)
?readxl
??readxl
read_excel("DJ_Lead_Time.xlsx", sheet = 1, col_names = TRUE, col_types = NULL, na = "",
skip = 0)
dat <- read_excel("DJ_Lead_Time.xlsx", sheet = 1, col_names = TRUE, col_types = NULL, na = "",
skip = 0)
str(data)
str(dat)
summary(dat)
data <- tbl_df(dat)
library(dplyr)
data <- tbl_df(dat)
data
AVG(DATA$ACTVSPROC)
MEAN(data$ACTVSPROC)
mean(data$ACTVSPROC)
data1 <- filter(data, ACTVSPROC !is.na)
data1 <- filter(data, !is.na(ACTVSPROC))
data1
mean(data1$ACTVSPROC)
mean(data1$ACT_LEAD_TIME) # AVERAGE CYCLE TIME
dt <- read.table("C:/Users/jbkessin/Documents/Get_Data_Proj/UCI HAR Dataset/train/X_train.txt", header = FALSE, sep = " ", quote = "\"'",
)
dt <- read.table("C:/Users/jbkessin/Documents/Get_Data_Proj/UCI HAR Dataset/train/X_train.txt", header = FALSE
, sep = " " )
read.table("C:/Users/jbkessin/Documents/Get_Data_Proj/UCI HAR Dataset/train/X_train.txt", header = FALSE
)
dt <- read.table("C:/Users/jbkessin/Documents/Get_Data_Proj/UCI HAR Dataset/train/X_train.txt", header = FALSE
)
str(dt)
summary(dt)
dim(dt)
setwd("C:/Users/jbkessin/Documents/Get_Data_Proj")
# load dplyr
library(dplyr)
# read in first train file
x_train <- read.table("C:/Users/jbkessin/Documents/Get_Data_Proj/UCI HAR Dataset/train/X_train.txt"
, header = FALSE)
# read in train labels, this file has code for which activity generated data in x_train
y_train <- read.table("C:/Users/jbkessin/Documents/Get_Data_Proj/UCI HAR Dataset/train/y_train.txt"
, header = FALSE)
# read in subject_train, this file contains which volunteer generated data
subject_train <- read.table("C:/Users/jbkessin/Documents/Get_Data_Proj/UCI HAR Dataset/train/subject_train.txt"
, header = FALSE)
# read in activity labels, this file has labels for what each activity is, joins to train labels
activity_labels <- read.table("C:/Users/jbkessin/Documents/Get_Data_Proj/UCI HAR Dataset/activity_labels.txt"
, header = FALSE)
# read in feature labels, this file lists the column names of all of the variables in train/test data sets
features <- read.table("C:/Users/jbkessin/Documents/Get_Data_Proj/UCI HAR Dataset/features.txt"
, header = FALSE)
# read in first test file
X_test <- read.table("C:/Users/jbkessin/Documents/Get_Data_Proj/UCI HAR Dataset/test/X_test.txt"
, header = FALSE)
# read in test labels, this file has code for which activity generated data in x_train
y_test <- read.table("C:/Users/jbkessin/Documents/Get_Data_Proj/UCI HAR Dataset/test/y_test.txt"
, header = FALSE)
# read in subject_test, this file contains which volunteer generated data
subject_test <- read.table("C:/Users/jbkessin/Documents/Get_Data_Proj/UCI HAR Dataset/test/subject_test.txt"
, header = FALSE)
## Combine datasets
train_test <- bind_rows(x_train, X_test)
# Clean-up features names
features1 <- gsub("[[:punct:]]", "", features$V2)
features1 <- gsub("Acc", "accelerometer", features1)
features1 <- gsub("Gyro", "gyroscope", features1)
features1 <- gsub("Mag", "magnitude", features1)
features1 <- gsub("BodyBody", "body", features1)
# camelClass ?
## this code adds attributes to train data set
# insert names into train_test file
col_names <-  as.vector(features1)
colnames(train_test) <- col_names
train_test <- tbl_df(train_test)
# remove duplicate column names due to issues later found
train_test1 <-  train_test[ ,!duplicated(colnames(train_test))]
train_test1
features
view(features)
View(features)
View(features1)
mean_sd <- select(train_test1, matches("mean","std","Mean","Std" ) )
mean_sd <- select(train_test1, contains("mean","std","Mean","Std" ) )
mean_sd <- select(train_test1, contains("mean","std" ) )
?grep
mean_sd <- select(train_test1, grep("mean"|"std", names(train_test1), ignore.case = TRUE, value=TRUE, ))
mean_sd <- select(train_test1, grep("[mean]"|"[std]", names(train_test1), ignore.case = TRUE, value=TRUE, ))
mean_sd <- select(train_test1, grep("[mean]", names(train_test1), ignore.case = TRUE, value=TRUE, ))
grep("[mean]", names(train_test1), ignore.case = TRUE)
grep("[mean]", names(train_test1), ignore.case = TRUE, value = TRUE)
mean_sd <- select(train_test1, grep("[mean]"|"[std]", names(train_test1), ignore.case = TRUE, value=TRUE, ))
grep(xor("[mean]","[std]"), names(train_test1), ignore.case = TRUE, value = TRUE)
grep("[std]", names(train_test1), ignore.case = TRUE, value = TRUE)
mean_sd <- select(train_test1, contains("mean"))
mean_sd
mean_sd <- bind_cols(select(train_test1, contains("mean")),select(train_test1, contains("std")))
mean_sd
y_train
y_test
master_activity_1
master_activity_1 <- bind_rows(y_train, y_test)
master_activity_1
activity_labels
master_activity_2 <- merge(master_activity_1, activity_labels, by = V1 )
master_activity_2 <- merge(master_activity_1, activity_labels)
master_activity_2
master_activity_2
head(master_activity_2)
master_activity_2 <- select(master_activity_2, V2)
head(master_activity_2)
final_detail <- bind_cols(master_activity_2, train_test1)
head(final_detail)
final_detail <- bind_cols(master_activity_2, mean_sd)
final_detail
final_detail <- tbl_df(bind_cols(master_activity_2, mean_sd))
head(final_detail)
master_activity_2 <- select(master_activity_2, V2)
head(master_activity_2)
str(master_activity_2)
final_detail <- bind_cols(master_activity_2, mean_sd)
str(final_detail)
subject_test
subject_bind <- bind_rows(subject_train, subject_test)
final_detail2 <- bind_cols(subject_bind, final_detail1)
final_detail1 <- bind_cols(master_activity_2, mean_sd)
final_detail2 <- bind_cols(subject_bind, final_detail1)
str(final_detail2)
final_detail2 <- rename(final_detail2, V1 = subject, V2 = ACTIVITY_NAME)
final_detail2 <- rename(final_detail2, V1 = subject)
final_detail2 <- rename(final_detail2, subject = V1)
str(final_detail2)
final_detail2 <- rename(final_detail2, subject = V1, activity_name = V2 )
final_detail2 <- bind_cols(subject_bind, final_detail1)
final_detail2 <- rename(final_detail2, subject = V1, activity_name = V2 )
str(final_detail2)
tidy_data <- final_detail_2 %>% group_by(activity_name, subject) %>% summarise_each(final_detail2,funs(mean))
tidy_data <- final_detail2 %>% group_by(activity_name, subject) %>% summarise_each(final_detail2,funs(mean))
tidy_data <- final_detail2 %>% group_by(activity_name, subject) %>% summarise(mean)
tidy_data <- final_detail2 %>% group_by(activity_name, subject) %>% summarise(final_detail2)
tidy_data <- final_detail2 %>% group_by(activity_name, subject) %>% summarise_each(funs(mean))
str(tidy_data)
tidy_data
View(tidy_data)
view(final_detail2)
View(final_detail2)
View(tidy_data)
tidy_data <- final_detail2 %>% group_by(activity_name) %>% group_by(subject)
%>% summarise_each(funs(mean))
write.table(final_detail2, C:/Users/jbkessin/Documents)
write.table(final_detail2, "C:/Users/jbkessin/Documents/final_detail.tdt", sep"\t")
write.table(final_detail2, "C:/Users/jbkessin/Documents/final_detail.txt", sep"\t")
write.table(final_detail2, "C:/Users/jbkessin/Documents/final_detail.txt", sep="\t")
subject_bind
print(subject_bind)
master_activity_1
master_activity_2
head(master_activity_2)
y_train
head(y_train)
activity_labels
y_test
head(y_test)
head(master_activity2)
head(master_activity2)
head(master_activity_2)
master_activity_2 <- inner_join(master_activity_1, activity_labels, by = "V1" )
master_activity_2
activity_labels
master_activity_2 <- select(master_activity_2, V2)
subject_bind <- bind_rows(subject_train, subject_test)
final_detail1 <- bind_cols(master_activity_2, mean_sd)
final_detail2 <- bind_cols(subject_bind, final_detail1)
final_detail3 <- rename(final_detail2, subject = V1, activity_name = V2 )
write.table(final_detail3, "C:/Users/jbkessin/Documents/final_detail.txt", sep="\t")
tidy_data <- final_detail3 %>% group_by(activity_name) %>% group_by(subject)
%>% summarise_each(funs(mean))
tidy_data <- final_detail3 %>% group_by(activity_name, subject)
%>% summarise_each(funs(mean))
tidy_data <- final_detail3 %>% group_by(activity_name, subject) %>% summarise_each(funs(mean))
tiday_data
tidy_data
swirl()
library(swirl)
swirl()
library(dplyr)
tbl_df(mydf)
cran <- tlb_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
print(cran)
cran
>group_by()
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package,  avg = mean(size))
summarize(by_package, mean(size))
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit
submit()
pack_sum <- summarize(by_package, count = sum(mean))
pack_sum <- summarize(by_package, count = mean(size))
pack_sum
pack_sum <- summarize(by_package, count = n(X))
pack_sum <- summarize(by_package, count = n())
pack_sum
pack_sum <- summarize(by_package,
count = n() ,
unique =  n_distinct(ip_id)  ,
countries = n_distinct(country) ,
avg_bytes = mean(size) )
pack_sum
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, unique(desc))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
